const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function testUnpin() {
  try {
    console.log('๐ Testing unpin functionality...')

    // ุงูุจุญุซ ุนู ุงููุงูุงุซูู ุงููุซุจุช
    const pinnedHackathon = await prisma.hackathon.findFirst({
      where: { isPinned: true },
      select: {
        id: true,
        title: true,
        isPinned: true
      }
    })

    if (!pinnedHackathon) {
      console.log('โ ูุง ููุฌุฏ ูุงูุงุซูู ูุซุจุช ุญุงููุงู')
      
      // ุชุซุจูุช ุงููุงูุงุซูู ุงูุฃูู ููุงุฎุชุจุงุฑ
      const firstHackathon = await prisma.hackathon.findFirst()
      if (firstHackathon) {
        await prisma.hackathon.update({
          where: { id: firstHackathon.id },
          data: { isPinned: true }
        })
        console.log(`๐ ุชู ุชุซุจูุช ุงููุงูุงุซูู ููุงุฎุชุจุงุฑ: ${firstHackathon.title}`)
        
        // ุงูุขู ุฅูุบุงุก ุงูุชุซุจูุช
        await prisma.hackathon.update({
          where: { id: firstHackathon.id },
          data: { isPinned: false }
        })
        console.log(`๐ ุชู ุฅูุบุงุก ุชุซุจูุช ุงููุงูุงุซูู: ${firstHackathon.title}`)
      }
    } else {
      console.log(`๐ ุงููุงูุงุซูู ุงููุซุจุช ุญุงููุงู: ${pinnedHackathon.title}`)
      
      // ุฅูุบุงุก ุงูุชุซุจูุช
      await prisma.hackathon.update({
        where: { id: pinnedHackathon.id },
        data: { isPinned: false }
      })
      console.log(`๐ ุชู ุฅูุบุงุก ุชุซุจูุช ุงููุงูุงุซูู: ${pinnedHackathon.title}`)
    }

    // ุงูุชุญูู ูู ุงููุชูุฌุฉ
    const allHackathons = await prisma.hackathon.findMany({
      select: {
        id: true,
        title: true,
        isPinned: true
      }
    })

    console.log('\n๐ฏ ุญุงูุฉ ุฌููุน ุงููุงูุงุซููุงุช ุจุนุฏ ุงูุงุฎุชุจุงุฑ:')
    allHackathons.forEach((h, index) => {
      console.log(`${index + 1}. ${h.title} - ${h.isPinned ? 'ูุซุจุช โ' : 'ุบูุฑ ูุซุจุช โ'}`)
    })

    console.log('\nโ ุงุฎุชุจุงุฑ ุฅูุบุงุก ุงูุชุซุจูุช ููุชูู!')

  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุงุฎุชุจุงุฑ ุฅูุบุงุก ุงูุชุซุจูุช:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testUnpin()
