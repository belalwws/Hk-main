// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Hackathon model - Core entity for managing multiple hackathons
model Hackathon {
  id                    String   @id @default(cuid())
  title                 String
  description           String?
  requirements          Json?    // Array of requirements
  categories            Json?    // Array of categories
  startDate             DateTime
  endDate               DateTime
  registrationDeadline  DateTime
  maxParticipants       Int?
  status                HackathonStatus @default(DRAFT)
  prizes                Json?    // {first: "", second: "", third: ""}
  settings              Json?    // Store hackathon-specific settings
  isPinned              Boolean  @default(false)  // للعرض في الصفحة الرئيسية
  evaluationOpen        Boolean  @default(false)  // هل التقييم مفتوح للمحكمين
  createdBy             String   // Admin user ID who created this hackathon
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  participants       Participant[]
  teams              Team[]
  judges             Judge[]
  scores             Score[]
  admins             Admin[]
  evaluationCriteria EvaluationCriterion[]

  @@map("hackathons")
}

enum HackathonStatus {
  DRAFT
  OPEN
  CLOSED
  COMPLETED
}

// User model - Base user entity
model User {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  password_hash String
  phone         String?
  city          String?
  nationality   String?
  skills        String?  // Technical skills
  experience    String?  // Previous experience
  preferredRole String?  // Preferred team role
  role          UserRole @default(participant)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  participations Participant[]
  judgeAssignments Judge[]
  adminActions   Admin[]

  @@map("users")
}

enum UserRole {
  participant
  judge
  admin
}

// Participant model - Links users to hackathons as participants
model Participant {
  id                  String          @id @default(cuid())
  userId              String
  hackathonId         String
  teamName            String?         // اسم الفريق المقترح
  projectTitle        String?         // عنوان المشروع
  projectDescription  String?         // وصف المشروع
  githubRepo          String?         // رابط المستودع
  teamType            TeamType        @default(INDIVIDUAL)
  teamRole            String?         // قائد، مصمم، مبرمج، إلخ
  status              ParticipantStatus @default(PENDING)
  score               Float?          // النتيجة النهائية
  feedback            String?         // ملاحظات المحكمين
  registeredAt        DateTime        @default(now())
  approvedAt          DateTime?
  rejectedAt          DateTime?

  // Relations
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  hackathon    Hackathon       @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  team         Team?           @relation(fields: [teamId], references: [id])
  teamId       String?

  @@unique([userId, hackathonId])
  @@map("participants")
}

enum TeamType {
  INDIVIDUAL
  TEAM
}

enum ParticipantStatus {
  PENDING
  APPROVED
  REJECTED
}

// Judge model - Links users to hackathons as judges
model Judge {
  id          String   @id @default(cuid())
  userId      String
  hackathonId String
  isActive    Boolean  @default(true)
  assignedAt  DateTime @default(now())

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  hackathon   Hackathon @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  scores      Score[]

  @@unique([userId, hackathonId])
  @@map("judges")
}

// Admin model - Links users to hackathons as admins
model Admin {
  id          String   @id @default(cuid())
  userId      String
  hackathonId String?  // null means super admin
  permissions Json?    // Store admin permissions
  assignedAt  DateTime @default(now())

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  hackathon   Hackathon? @relation(fields: [hackathonId], references: [id], onDelete: Cascade)

  @@unique([userId, hackathonId])
  @@map("admins")
}

model Team {
  id          String   @id @default(cuid())
  name        String
  hackathonId String
  teamNumber  Int
  leaderId    String?  // Team leader participant ID
  ideaFile    String?  // Path to uploaded PowerPoint file
  ideaTitle   String?
  ideaDescription String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  hackathon   Hackathon     @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  participants Participant[]
  scores      Score[]

  @@unique([hackathonId, teamNumber])
  @@map("teams")
}

model Score {
  id          String   @id @default(cuid())
  judgeId     String
  teamId      String
  hackathonId String
  criterionId String
  score       Int      // Score given (1-5 for star rating)
  maxScore    Int      @default(5)
  comments    String?
  createdAt   DateTime @default(now())

  // Relations
  judge       Judge              @relation(fields: [judgeId], references: [id], onDelete: Cascade)
  team        Team               @relation(fields: [teamId], references: [id], onDelete: Cascade)
  hackathon   Hackathon          @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  criterion   EvaluationCriterion @relation(fields: [criterionId], references: [id], onDelete: Cascade)

  // Ensure one score per judge per team per criterion per hackathon
  @@unique([judgeId, teamId, criterionId, hackathonId])
  @@map("scores")
}

model EvaluationCriterion {
  id          String   @id @default(cuid())
  name        String
  description String?
  maxScore    Int      @default(10)
  hackathonId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  hackathon   Hackathon @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  scores      Score[]

  @@map("evaluation_criteria")
}

model ResultsSnapshot {
  id        String   @id @default(cuid())
  name      String?
  data      Json
  createdAt DateTime @default(now())

  @@map("results_snapshots")
}
